/* tslint:disable */
/* eslint-disable */
/**
 * S2I final
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateTodo201Response } from '../models';
// @ts-ignore
import type { DeleteAccount200Response } from '../models';
// @ts-ignore
import type { DeleteAccount500Response } from '../models';
// @ts-ignore
import type { GetAllAccounts401Response } from '../models';
// @ts-ignore
import type { GetAllTodoAccounts200Response } from '../models';
// @ts-ignore
import type { GetAllTodoAccounts404Response } from '../models';
// @ts-ignore
import type { GetAllTodos200Response } from '../models';
// @ts-ignore
import type { GetTodo200Response } from '../models';
// @ts-ignore
import type { ShareTodoRequest } from '../models';
// @ts-ignore
import type { TodoBodyReq } from '../models';
// @ts-ignore
import type { UpdateAccount200Response } from '../models';
// @ts-ignore
import type { UpdateAccount400Response } from '../models';
// @ts-ignore
import type { UpdateAccount500Response } from '../models';
// @ts-ignore
import type { UpdateTodo500Response } from '../models';
/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new todo
         * @param {TodoBodyReq} todoBodyReq JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodo: async (todoBodyReq: TodoBodyReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoBodyReq' is not null or undefined
            assertParamExists('createTodo', 'todoBodyReq', todoBodyReq)
            const localVarPath = `/api/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoBodyReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing todo
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('deleteTodo', 'todoId', todoId)
            const localVarPath = `/api/todo/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all shared todos
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {string} [start] filter by date: start data
         * @param {string} [end] filter by date: end data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSharedTodos: async (limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, start?: string, end?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo/shared/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortValue !== undefined) {
                localVarQueryParameter['sortValue'] = sortValue;
            }

            if (filterBy !== undefined) {
                localVarQueryParameter['filterBy'] = filterBy;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['filterValue'] = filterValue;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all accounts of a specific todo
         * @summary Get all todo accounts
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTodoAccounts: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('getAllTodoAccounts', 'todoId', todoId)
            const localVarPath = `/api/todo/{todoId}/accounts/all`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all todos data
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {string} [start] filter by date: start data
         * @param {string} [end] filter by date: end data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTodos: async (limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, start?: string, end?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortValue !== undefined) {
                localVarQueryParameter['sortValue'] = sortValue;
            }

            if (filterBy !== undefined) {
                localVarQueryParameter['filterBy'] = filterBy;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['filterValue'] = filterValue;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data of a single todo
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodo: async (todoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('getTodo', 'todoId', todoId)
            const localVarPath = `/api/todo/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Share a specific todo with other accounts
         * @param {string} todoId todo id
         * @param {ShareTodoRequest} shareTodoRequest JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareTodo: async (todoId: string, shareTodoRequest: ShareTodoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('shareTodo', 'todoId', todoId)
            // verify required parameter 'shareTodoRequest' is not null or undefined
            assertParamExists('shareTodo', 'shareTodoRequest', shareTodoRequest)
            const localVarPath = `/api/todo/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareTodoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a specific todo
         * @param {string} todoId todo id
         * @param {TodoBodyReq} todoBodyReq JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo: async (todoId: string, todoBodyReq: TodoBodyReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('updateTodo', 'todoId', todoId)
            // verify required parameter 'todoBodyReq' is not null or undefined
            assertParamExists('updateTodo', 'todoBodyReq', todoBodyReq)
            const localVarPath = `/api/todo/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoBodyReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new todo
         * @param {TodoBodyReq} todoBodyReq JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTodo(todoBodyReq: TodoBodyReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTodo201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTodo(todoBodyReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodoApi.createTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing todo
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodo(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodo(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodoApi.deleteTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all shared todos
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {string} [start] filter by date: start data
         * @param {string} [end] filter by date: end data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSharedTodos(limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, start?: string, end?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllTodos200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSharedTodos(limit, page, sortBy, sortValue, filterBy, filterValue, start, end, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodoApi.getAllSharedTodos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all accounts of a specific todo
         * @summary Get all todo accounts
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTodoAccounts(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllTodoAccounts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTodoAccounts(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodoApi.getAllTodoAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all todos data
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {string} [start] filter by date: start data
         * @param {string} [end] filter by date: end data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTodos(limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, start?: string, end?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllTodos200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTodos(limit, page, sortBy, sortValue, filterBy, filterValue, start, end, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodoApi.getAllTodos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get data of a single todo
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodo(todoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTodo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodo(todoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodoApi.getTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Share a specific todo with other accounts
         * @param {string} todoId todo id
         * @param {ShareTodoRequest} shareTodoRequest JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareTodo(todoId: string, shareTodoRequest: ShareTodoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareTodo(todoId, shareTodoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodoApi.shareTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a specific todo
         * @param {string} todoId todo id
         * @param {TodoBodyReq} todoBodyReq JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTodo(todoId: string, todoBodyReq: TodoBodyReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTodo(todoId, todoBodyReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TodoApi.updateTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new todo
         * @param {TodoBodyReq} todoBodyReq JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodo(todoBodyReq: TodoBodyReq, options?: RawAxiosRequestConfig): AxiosPromise<CreateTodo201Response> {
            return localVarFp.createTodo(todoBodyReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing todo
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(todoId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAccount200Response> {
            return localVarFp.deleteTodo(todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all shared todos
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {string} [start] filter by date: start data
         * @param {string} [end] filter by date: end data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSharedTodos(limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, start?: string, end?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAllTodos200Response> {
            return localVarFp.getAllSharedTodos(limit, page, sortBy, sortValue, filterBy, filterValue, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all accounts of a specific todo
         * @summary Get all todo accounts
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTodoAccounts(todoId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAllTodoAccounts200Response> {
            return localVarFp.getAllTodoAccounts(todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all todos data
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {string} [start] filter by date: start data
         * @param {string} [end] filter by date: end data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTodos(limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, start?: string, end?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAllTodos200Response> {
            return localVarFp.getAllTodos(limit, page, sortBy, sortValue, filterBy, filterValue, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get data of a single todo
         * @param {string} todoId todo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodo(todoId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetTodo200Response> {
            return localVarFp.getTodo(todoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Share a specific todo with other accounts
         * @param {string} todoId todo id
         * @param {ShareTodoRequest} shareTodoRequest JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareTodo(todoId: string, shareTodoRequest: ShareTodoRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccount200Response> {
            return localVarFp.shareTodo(todoId, shareTodoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a specific todo
         * @param {string} todoId todo id
         * @param {TodoBodyReq} todoBodyReq JSON with todo data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(todoId: string, todoBodyReq: TodoBodyReq, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccount200Response> {
            return localVarFp.updateTodo(todoId, todoBodyReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI {
    /**
     * 
     * @summary Create new todo
     * @param {TodoBodyReq} todoBodyReq JSON with todo data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public createTodo(todoBodyReq: TodoBodyReq, options?: RawAxiosRequestConfig) {
        return TodoApiFp(this.configuration).createTodo(todoBodyReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing todo
     * @param {string} todoId todo id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public deleteTodo(todoId: string, options?: RawAxiosRequestConfig) {
        return TodoApiFp(this.configuration).deleteTodo(todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all shared todos
     * @param {number} [limit] Limit of elements
     * @param {number} [page] Current page
     * @param {string} [sortBy] sort by element
     * @param {string} [sortValue] sorting type
     * @param {string} [filterBy] fields to filter
     * @param {string} [filterValue] Values to filter
     * @param {string} [start] filter by date: start data
     * @param {string} [end] filter by date: end data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getAllSharedTodos(limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, start?: string, end?: string, options?: RawAxiosRequestConfig) {
        return TodoApiFp(this.configuration).getAllSharedTodos(limit, page, sortBy, sortValue, filterBy, filterValue, start, end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all accounts of a specific todo
     * @summary Get all todo accounts
     * @param {string} todoId todo id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getAllTodoAccounts(todoId: string, options?: RawAxiosRequestConfig) {
        return TodoApiFp(this.configuration).getAllTodoAccounts(todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all todos data
     * @param {number} [limit] Limit of elements
     * @param {number} [page] Current page
     * @param {string} [sortBy] sort by element
     * @param {string} [sortValue] sorting type
     * @param {string} [filterBy] fields to filter
     * @param {string} [filterValue] Values to filter
     * @param {string} [start] filter by date: start data
     * @param {string} [end] filter by date: end data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getAllTodos(limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, start?: string, end?: string, options?: RawAxiosRequestConfig) {
        return TodoApiFp(this.configuration).getAllTodos(limit, page, sortBy, sortValue, filterBy, filterValue, start, end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get data of a single todo
     * @param {string} todoId todo id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getTodo(todoId: string, options?: RawAxiosRequestConfig) {
        return TodoApiFp(this.configuration).getTodo(todoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Share a specific todo with other accounts
     * @param {string} todoId todo id
     * @param {ShareTodoRequest} shareTodoRequest JSON with todo data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public shareTodo(todoId: string, shareTodoRequest: ShareTodoRequest, options?: RawAxiosRequestConfig) {
        return TodoApiFp(this.configuration).shareTodo(todoId, shareTodoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a specific todo
     * @param {string} todoId todo id
     * @param {TodoBodyReq} todoBodyReq JSON with todo data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public updateTodo(todoId: string, todoBodyReq: TodoBodyReq, options?: RawAxiosRequestConfig) {
        return TodoApiFp(this.configuration).updateTodo(todoId, todoBodyReq, options).then((request) => request(this.axios, this.basePath));
    }
}

