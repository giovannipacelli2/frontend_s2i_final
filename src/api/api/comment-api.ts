/* tslint:disable */
/* eslint-disable */
/**
 * S2I final
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommentBodyReq } from '../models';
// @ts-ignore
import type { CommentsResponse } from '../models';
// @ts-ignore
import type { CreateComment201Response } from '../models';
// @ts-ignore
import type { DeleteAccount200Response } from '../models';
// @ts-ignore
import type { DeleteAccount500Response } from '../models';
// @ts-ignore
import type { GetAllAccounts401Response } from '../models';
// @ts-ignore
import type { GetComment200Response } from '../models';
// @ts-ignore
import type { GetComment404Response } from '../models';
// @ts-ignore
import type { UpdateAccount200Response } from '../models';
// @ts-ignore
import type { UpdateAccount400Response } from '../models';
// @ts-ignore
import type { UpdateAccount500Response } from '../models';
/**
 * CommentApi - axios parameter creator
 * @export
 */
export const CommentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new comment in a specific todo
         * @param {string} todoId todo id
         * @param {CommentBodyReq} commentBodyReq JSON with comment data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (todoId: string, commentBodyReq: CommentBodyReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('createComment', 'todoId', todoId)
            // verify required parameter 'commentBodyReq' is not null or undefined
            assertParamExists('createComment', 'commentBodyReq', commentBodyReq)
            const localVarPath = `/api/todo/{todoId}/comment`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentBodyReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing comment
         * @param {string} commentId comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment: async (commentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('deleteComment', 'commentId', commentId)
            const localVarPath = `/api/comment/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get comments from specific todo
         * @param {string} todoId todo id
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTodoComments: async (todoId: string, limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoId' is not null or undefined
            assertParamExists('getAllTodoComments', 'todoId', todoId)
            const localVarPath = `/api/todo/{todoId}/comment/all`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortValue !== undefined) {
                localVarQueryParameter['sortValue'] = sortValue;
            }

            if (filterBy !== undefined) {
                localVarQueryParameter['filterBy'] = filterBy;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['filterValue'] = filterValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data of a single comment
         * @param {string} commentId model id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment: async (commentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('getComment', 'commentId', commentId)
            const localVarPath = `/api/comment/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a specific comment
         * @param {string} commentId model id
         * @param {CommentBodyReq} commentBodyReq JSON with comment data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment: async (commentId: string, commentBodyReq: CommentBodyReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('updateComment', 'commentId', commentId)
            // verify required parameter 'commentBodyReq' is not null or undefined
            assertParamExists('updateComment', 'commentBodyReq', commentBodyReq)
            const localVarPath = `/api/comment/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentBodyReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentApi - functional programming interface
 * @export
 */
export const CommentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new comment in a specific todo
         * @param {string} todoId todo id
         * @param {CommentBodyReq} commentBodyReq JSON with comment data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(todoId: string, commentBodyReq: CommentBodyReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateComment201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(todoId, commentBodyReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.createComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an existing comment
         * @param {string} commentId comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteComment(commentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteComment(commentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.deleteComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get comments from specific todo
         * @param {string} todoId todo id
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTodoComments(todoId: string, limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTodoComments(todoId, limit, page, sortBy, sortValue, filterBy, filterValue, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.getAllTodoComments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get data of a single comment
         * @param {string} commentId model id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComment(commentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetComment200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComment(commentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.getComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a specific comment
         * @param {string} commentId model id
         * @param {CommentBodyReq} commentBodyReq JSON with comment data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComment(commentId: string, commentBodyReq: CommentBodyReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateComment(commentId, commentBodyReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.updateComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommentApi - factory interface
 * @export
 */
export const CommentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new comment in a specific todo
         * @param {string} todoId todo id
         * @param {CommentBodyReq} commentBodyReq JSON with comment data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(todoId: string, commentBodyReq: CommentBodyReq, options?: RawAxiosRequestConfig): AxiosPromise<CreateComment201Response> {
            return localVarFp.createComment(todoId, commentBodyReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing comment
         * @param {string} commentId comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment(commentId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAccount200Response> {
            return localVarFp.deleteComment(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get comments from specific todo
         * @param {string} todoId todo id
         * @param {number} [limit] Limit of elements
         * @param {number} [page] Current page
         * @param {string} [sortBy] sort by element
         * @param {string} [sortValue] sorting type
         * @param {string} [filterBy] fields to filter
         * @param {string} [filterValue] Values to filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTodoComments(todoId: string, limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, options?: RawAxiosRequestConfig): AxiosPromise<CommentsResponse> {
            return localVarFp.getAllTodoComments(todoId, limit, page, sortBy, sortValue, filterBy, filterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get data of a single comment
         * @param {string} commentId model id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment(commentId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetComment200Response> {
            return localVarFp.getComment(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a specific comment
         * @param {string} commentId model id
         * @param {CommentBodyReq} commentBodyReq JSON with comment data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment(commentId: string, commentBodyReq: CommentBodyReq, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAccount200Response> {
            return localVarFp.updateComment(commentId, commentBodyReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommentApi - object-oriented interface
 * @export
 * @class CommentApi
 * @extends {BaseAPI}
 */
export class CommentApi extends BaseAPI {
    /**
     * 
     * @summary Create new comment in a specific todo
     * @param {string} todoId todo id
     * @param {CommentBodyReq} commentBodyReq JSON with comment data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public createComment(todoId: string, commentBodyReq: CommentBodyReq, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).createComment(todoId, commentBodyReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing comment
     * @param {string} commentId comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public deleteComment(commentId: string, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).deleteComment(commentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get comments from specific todo
     * @param {string} todoId todo id
     * @param {number} [limit] Limit of elements
     * @param {number} [page] Current page
     * @param {string} [sortBy] sort by element
     * @param {string} [sortValue] sorting type
     * @param {string} [filterBy] fields to filter
     * @param {string} [filterValue] Values to filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public getAllTodoComments(todoId: string, limit?: number, page?: number, sortBy?: string, sortValue?: string, filterBy?: string, filterValue?: string, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).getAllTodoComments(todoId, limit, page, sortBy, sortValue, filterBy, filterValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get data of a single comment
     * @param {string} commentId model id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public getComment(commentId: string, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).getComment(commentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a specific comment
     * @param {string} commentId model id
     * @param {CommentBodyReq} commentBodyReq JSON with comment data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public updateComment(commentId: string, commentBodyReq: CommentBodyReq, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).updateComment(commentId, commentBodyReq, options).then((request) => request(this.axios, this.basePath));
    }
}

